-- GG/GR課題に向けてのシェーダー改造 --
AssimpVS.hlsl等
頂点シェーダーを増やせるようにする。
もとのAssimpシェーダーを流用し、最適化、汎用化させる。
->通常 / バンプ / etc...
->セマンティクス等は同じにする。->InputLayoutを汎化させたい。

AssimpPS.hlsl等
ピクセルシェーダーも増やせるように。

-- 現時点での情報 --
VS_IN -> 座標 / 法線 / テクスチャ座標 / BoneIndex / BoneWeight
PS_IN -> 変換後座標 / テクスチャ座標 / 法線 / スキニング後座標

ConstanceBuffer ->  カメラ / ライトの情報 (b0)
					マテリアル情報 (b1)
					ボーンポーズ行列 (b2)

Texture2D ->	テクスチャ (t0)
				エミッションテクスチャ (t1)
				透過テクスチャ (t2)
				鏡面反射テクスチャ (t3)

SamplerState ->	サンプラ (s0) (これは固定でいいはず...)

---------------------
以上の情報でほとんどのシェーダーは実現できるが、
追加でテクスチャや定数バッファが必要なシェーダーも現れる
なので、追加分はclass:Modelが設定する必要がある。
使用未使用を決め、各バッファを更新する

共通処理はAssimpModel.cppに任せちゃうことにする。

- class:Modelが持つ情報
頂点シェーダーID
ピクセルシェーダーID
追加定数バッファ利用フラグ
追加テクスチャ利用フラグ

これらの情報はモデルごとに持てるようにする。

- class:ShaderManagerが持つ情報
各シェーダーの実体情報
追加定数バッファ情報
追加テクスチャ情報

GGのShdaerScene的な役割を持たせる

- class:VertexBase
頂点シェーダーの情報
インプットレイアウトの情報

各頂点シェーダーは継承して生成
Make関数をoverrideして情報を書き込む
ただ、Assimpの頂点情報を上書きしたくないので、ここは後回し…
やっぱ、接ベクトルも入れ込んだ一つのシェーダーにしちゃう
(増やせるようにはしておくけど、実装方法は謎。)

- class:PixelBase
ピクセルシェーダーの情報

作るだけ。

- 定数バッファの扱い
ApplicationのInitでサイズ、タイプ、番号を指定して作成。名前で管理する。
ShaderManager::ConstanceWrite(std::string,void*)で書き込みできるようにする。
ShaderManagerに各バッファを持たせておくことになる。
定数バッファ入力用の情報はclass:Modelに入れておく。
UpdateSubresourceは重いので、useFlagをModelに持たせる。

- テクスチャの扱い
ApplicationのInitで番号とTextureResourceを指定して生成。名前で管理
ただ、LoadSceneの前にテクスチャを登録しなければならない？？
class:Modelに使用フラグを持たせておく。








